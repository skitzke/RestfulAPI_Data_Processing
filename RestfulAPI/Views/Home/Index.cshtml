<div class="jumbotron">
    <h2>Representational state transfer</h2>
    <p class="lead">REST is a software design pattern typically used for web applications. In layman's terms this means that it is a commonly used idea used in many different projects. It stands for REpresentational State Transfer. The basic idea of REST is treating objects on the server-side (as in rows in a database table) as resources than can be created or destroyed</p>
</div>
<div class="container">
    <h2>Fundamental REST Principles</h2>
    <h4>Client-Server Communication</h4>
    <p>Client-server architectures have a very distinct separation of concerns. All applications built in the RESTful style must also be client-server in principle.</p>
    <h4>Stateless</h4>
    <p>Each client request to the server requires that its state be fully represented. The server must be able to completely understand the client request without using any server context or server session state. It follows that all state must be kept on the client. We will discuss stateless representation in more detail later.</p>
    <h4>Cacheable</h4>
    <p>Cache constraints may be used, thus enabling response data to to be marked as cacheable or not-cachable. Any data marked as cacheable may be reused as the response to the same subsequent request.</p>
</div>